version: "3.8"
services:

  traefik:
    image: traefik:v2.4
    container_name: proxy
    command:
      - --api
      - --log
      - --accesslog
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=web
      - --entrypoints.web.address=:80
      - --entrypoints.web-secure.address=:443

      # LetsEncrypt Config
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.storage=/acme.json
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${DNS_PROVIDER}
    ports:
      - 80:80
      - 443:443
    networks:
      - web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    env_file:
      - .env
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"

        - "traefik.http.routers.traefik.tls=true"
        - "traefik.http.routers.traefik.tls.certresolver=myresolver"
        - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.middlewares=authtraefik"
        - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_CREDENTIALS}"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

        # Redirect all HTTP to HTTPS permanently
        - "traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)"
        - "traefik.http.routers.http_catchall.entrypoints=web"
        - "traefik.http.routers.http_catchall.middlewares=https_redirect"
        - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


  shiny:
    image: ericwburden/trainr-ui
    container_name: trainrUI
    networks:
      - web
      - internal
    env_file:
      - .env
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.shiny.rule=Host(`${DOMAIN?Variable not set}`)||Host(`www.${DOMAIN?Variable not set}`)"
        - "traefik.http.services.shiny.loadbalancer.server.port=3838"
        - "traefik.http.routers.shiny.tls=true"
        - "traefik.http.routers.shiny.tls.certresolver=myresolver"
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 2
        delay: 15s
      mode: replicated
      replicas: 4
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - internal
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.redis.loadbalancer.server.port=6379"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30


  api:
    image: ericwburden/trainr-api
    container_name: trainrAPI
    networks:
      - internal
    deploy:
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 2
        delay: 15s
      mode: replicated
      replicas: 4
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.api.loadbalancer.server.port=8000"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api:8000/_ping"]
      interval: 30s
      timeout: 30s
      retries: 3


networks:
  web:
    external: true
  internal:
    exernal: false

volumes:
  letsencrypt: {}
  redis_data: {}
