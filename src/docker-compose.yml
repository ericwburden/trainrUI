version: '3.3'

# Need to set the following environment variables
# DOMAIN // The web address of the application, `trainr.dev`
# EMAIL  // The email address for letsencrypt
# USERNAME        // Username for the Traefik dashboard
# HASHED_PASSWORD // Password for the Traefik dahsboard, '$(openssl passwd -apr1)'

services:

  traefik:
    image: traefik:v2.2
    ports:
      - 80:80
      - 443:443
    deploy:
      placement:
        constraints:
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        - traefik.http.routers.traefik-public-https.service=api@internal
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates
    command:
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --certificatesresolvers.le.acme.email=${EMAIL?Variable not set}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      #- --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --accesslog
      - --log
      - --log.level=DEBUG
      - --api
    networks:
      - traefik-public


  trainr:
    image: ericwburden/trainr-ui
    networks:
      - traefik-public
      - internal
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.trainr.tls=true
        - traefik.http.routers.trainr.tls.certresolver=le
        - traefik.http.routers.trainr.rule=Host(`${DOMAIN?Variable not set}`)||Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.services.trainr.loadbalancer.server.port=3838
      update_config:
        parallelism: 2
        delay: 15s
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


  api:
    image: ericwburden/trainr-api
    networks:
      - internal
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.services.trainr-api.loadbalancer.server.port=8000
      update_config:
        parallelism: 2
        delay: 15s
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api:8000/_ping"]
      interval: 30s
      timeout: 30s
      retries: 3


  redis:
    image: redis
    networks:
      - internal
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.services.trainr-api.loadbalancer.server.port=6379
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30


volumes:
  traefik-public-certificates: {}

networks:
  traefik-public:
    external: true
  internal: {}
